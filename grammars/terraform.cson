scopeName: 'source.terraform'
name: 'Terraform'
fileTypes: [
  'tf'
  'tfvars'
]
foldingStartMarker: '\\{\\s*$'
foldingStopMarker: '^\\s*\\}'

patterns: [
  {include: '#comments'}
  {include: '#sections'}
  {include: '#literals'}
  {include: '#keywords'}
  {include: '#properties'}
  {include: 'text.interpolation.hashicorp#interplang'}
]

repository:
  comments:
    patterns: [
      {
        begin: '#'
        beginCaptures:
          0:
            name: 'punctuation.definition.comment'
        end: '$'
        name: 'comment.line.number-sign'
      }
      {
        begin: '\\/\\/'
        beginCaptures:
          0:
            name: 'punctuation.definition.comment'
        end: '$'
        name: 'comment.line.double-slash'
      }
      {
        begin: '\\/\\*'
        beginCaptures:
          0:
            name: 'punctuation.definition.comment'
        end: '\\*\\/'
        name: 'comment.block'
      }
    ]
  primitives:
    patterns: [
      {
        match: '\\b(?:true|false)\\b'
        name: 'constant.language'
      }
      {
        match: '\\b(?:\\d+[kKmMgG]?b?)\\b'
        name: 'constant.numeric'
      }
      {
        match: '\\b(?:null)\\b'
        name: 'constant.language'
      }
      {include: '#heredocs'}
      {include: '#strings'}
    ]
  strings:
    patterns: [
      {
        comment: 'Terraform claims it only uses double-quoted strings'
        begin: '"'
        end: '"'
        name: 'string.interpolated'
        contentName: 'entity'
      }
    ]
  heredocs:
    patterns: [
      # standard heredoc strings
      {
        begin: '<<(\\w*JSON)$'
        beginCaptures:
          1:
            name: 'keyword.control.heredoc-token'
        end: '^(\\1)$'
        endCaptures:
          1:
            name: 'keyword.control.heredoc-token'
        contentName: 'string.interpolated'
        patterns: [
          {include: 'source.json'}
        ]
      }
      {
        begin: '<<(\\w*YA?ML)$'
        beginCaptures:
          1:
            name: 'keyword.control.heredoc-token'
        end: '^(\\1)$'
        endCaptures:
          1:
            name: 'keyword.control.heredoc-token'
        contentName: 'string.interpolated'
        patterns: [
          {include: 'source.yaml'}
        ]
      }
      {
        begin: '<<(\\w*XML)$'
        beginCaptures:
          1:
            name: 'keyword.control.heredoc-token'
        end: '^(\\1)$'
        endCaptures:
          1:
            name: 'keyword.control.heredoc-token'
        contentName: 'string.interpolated'
        patterns: [
          {include: 'source.xml'}
        ]
      }
      {
        begin: '<<(\\w*SH)$'
        beginCaptures:
          1:
            name: 'keyword.control.heredoc-token'
        end: '^(\\1)$'
        endCaptures:
          1:
            name: 'keyword.control.heredoc-token'
        contentName: 'string.interpolated'
        patterns: [
          {include: 'source.shell'}
        ]
      }
      {
        begin: '<<(\\w+)$'
        beginCaptures:
          1:
            name: 'keyword.control.heredoc-token'
        end: '^(\\1)$'
        endCaptures:
          1:
            name: 'keyword.control.heredoc-token'
        name: 'keyword.operator.heredoc'
        contentName: 'string.interpolated'
      }

      # indented heredoc strings
      # these look very simliar to normal heredoc strings but require a minus
      # in the start token and allow indentation on the end token
      {
        begin: '<<-(\\w*JSON)$'
        beginCaptures:
          1:
            name: 'keyword.control.heredoc-token'
        end: '^\\s+(\\1)$'
        endCaptures:
          1:
            name: 'keyword.control.heredoc-token'
        contentName: 'string.interpolated'
        patterns: [
          {include: 'source.json'}
        ]
      }
      {
        begin: '<<-(\\w*YA?ML)$'
        beginCaptures:
          1:
            name: 'keyword.control.heredoc-token'
        end: '^\\s+(\\1)$'
        endCaptures:
          1:
            name: 'keyword.control.heredoc-token'
        contentName: 'string.interpolated'
        patterns: [
          {include: 'source.yaml'}
        ]
      }
      {
        begin: '<<-(\\w*XML)$'
        beginCaptures:
          1:
            name: 'keyword.control.heredoc-token'
        end: '^\\s+(\\1)$'
        endCaptures:
          1:
            name: 'keyword.control.heredoc-token'
        contentName: 'string.interpolated'
        patterns: [
          {include: 'source.xml'}
        ]
      }
      {
        begin: '<<-(\\w*SH)$'
        beginCaptures:
          1:
            name: 'keyword.control.heredoc-token'
        end: '^\\s+(\\1)$'
        endCaptures:
          1:
            name: 'keyword.control.heredoc-token'
        contentName: 'string.interpolated'
        patterns: [
          {include: 'source.shell'}
        ]
      }
      {
        begin: '<<-(\\w+)$'
        beginCaptures:
          1:
            name: 'keyword.control.heredoc-token'
        end: '^\\s+(\\1)$'
        endCaptures:
          1:
            name: 'keyword.control.heredoc-token'
        name: 'keyword.operator.heredoc'
        contentName: 'string.interpolated'
      }
    ]
  literals:
    patterns: [
      {include: '#primitives'}
      {include: '#lists'}
    ]
  lists:
    patterns: [
      {
        name: 'language.list'
        begin: '\\['
        end: '\\]'
        patterns: [
          {include: '#comments'}
          {include: '#literals'}
          {include: '#keywords'}
          {include: 'text.interpolation.hashicorp#interplang'}
          {match: ','}
        ]
      }
    ]
  sections:
    patterns: [
      {
        begin: '(\\w+)\\s*((:?"(\\w|-)*"\\s*)*)\\s*(\\{)'
        beginCaptures:
          1:
            name: 'entity.name.section'
          2:
            name: 'variable.parameter'
          3:
            name: 'punctuation.section.begin'
        end: '(\\})'
        endCaptures:
          1:
            name: 'punctuation.section.end'
        name: 'meta.section'
        patterns: [
          {include: '$base'}
        ]
      }
    ]
  properties:
    patterns: [
      {
        match: '\\b(count|depends_on|for_each|lifecycle|create_before_destroy|ignore_changes|prevent_destroy)\\b\\s*(=)'
        captures:
          1:
            name: 'support.variable'
          2:
            name: 'punctuation.assignment'
      }
    ]
  keywords:
    patterns: [
      {
        match: '\\b(for|if|in|module|output|provider|resource|variable)\\b'
        name: 'support.type'
      }
    ]
